AWSTemplateFormatVersion: "2010-09-09"
Description: EEG Processing Pipeline with Manifest-Driven Workflow
Transform: AWS::Serverless-2016-10-31

Parameters:
  SharedApiId:
    Type: String
    Description: ID of the shared API Gateway
  EEGUploadBucketName:
    Type: String
    Description: Name of the existing EEG upload bucket
  PrivateSG:
    Type: String
    Description: Security group ID for private resources
  PrivateSubnetId1:
    Type: String
    Description: First private subnet ID
  PrivateSubnetId2:
    Type: String
    Description: Second private subnet ID

Resources:
  # S3 Event Rule to trigger Lambda on new uploads. The entry point to this pipeline, triggered when EEG data is uploaded to the S3 bucket.
  S3UploadEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref EEGUploadBucketName
      Targets:
        - Arn: !GetAtt S3EventProcessorLambda.Arn
          Id: S3UploadEventTarget
  # --- S3 Buckets ---
  EEGResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ai4ng-eeg-results-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EEGResultsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EEGResultsBucket
      PolicyDocument:
        Statement:
          - Sid: DenyUnencryptedUploads
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt EEGResultsBucket.Arn
              - !Sub "${EEGResultsBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: EnforcePrivateAccess
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt EEGResultsBucket.Arn
              - !Sub "${EEGResultsBucket.Arn}/*"
            Condition:
              StringNotEquals:
                "aws:PrincipalAccount": !Ref AWS::AccountId

  # --- DynamoDB Tables ---
  ProcessingStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EEGProcessingStatus
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: expiry
        Enabled: true

  EEGClassifierTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FBCSPClassifierParameters
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # --- API Gateway Integration ---
  StatusIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SharedApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStatusLambda.Arn}/invocations
      PayloadFormatVersion: "2.0"
      IntegrationMethod: POST

  StatusRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: "GET /api/status/{sessionId}"
      AuthorizationType: JWT
      AuthorizerId: !ImportValue SharedApiAuthorizerId
      Target: !Sub integrations/${StatusIntegration}

  # --- CloudWatch Log Groups ---
  S3EventProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-S3EventProcessor
      RetentionInDays: 14

  GetStatusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-GetStatus
      RetentionInDays: 14

  ManifestProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ManifestProcessor
      RetentionInDays: 14

  ClassifierProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ClassifierProcessor
      RetentionInDays: 14

  ResultsMetadataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-ResultsMetadata
      RetentionInDays: 14

  # --- Lambda Functions ---
  # S3 Event Processor Lambda
  S3EventProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      Runtime: nodejs22.x
      CodeUri: ../src/lambdas/s3EventProcessor/
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ProcessingStateMachine
      Policies:
        - Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref ProcessingStateMachine
        - S3ReadPolicy:
            BucketName: !Ref EEGUploadBucketName
        - CloudWatchLogsFullAccess
      LoggingConfig:
        LogFormat: JSON
        LogGroup: !Ref S3EventProcessorLogGroup

  # Permission for EventBridge to invoke Lambda
  S3EventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt S3EventProcessorLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadEventRule.Arn

  GetStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/lambdas/statusCheck/
      Handler: app.handler
      Runtime: nodejs22.x
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProcessingStatusTable
        - CloudWatchLogsFullAccess
      LoggingConfig:
        LogFormat: JSON
        LogGroup: !Ref GetStatusLogGroup

  GetStatusLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetStatusLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedApiId}/*/GET/api/status/{sessionId}"

  # Manifest Processor Lambda
  ManifestProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/lambdas/manifestProcessor/
      Handler: app.handler
      Runtime: nodejs22.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ProcessingStatusTable
        - S3ReadPolicy:
            BucketName: !Ref EEGResultsBucket
        - CloudWatchLogsFullAccess
      LoggingConfig:
        LogFormat: JSON
        LogGroup: !Ref ManifestProcessorLogGroup

  # Classifier Processor Lambda
  ClassifierProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/lambdas/classifierProcessor/
      Handler: app.handler
      Runtime: nodejs22.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          CLASSIFIER_TABLE: !Ref EEGClassifierTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref EEGClassifierTable
        - S3ReadPolicy:
            BucketName: !Ref EEGResultsBucket
        - CloudWatchLogsFullAccess
      LoggingConfig:
        LogFormat: JSON
        LogGroup: !Ref ClassifierProcessorLogGroup

  # Results Metadata Lambda
  ResultsMetadataLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src/lambdas/resultsMetadata/
      Handler: app.handler
      Runtime: nodejs22.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ProcessingStatusTable
        - S3ReadPolicy:
            BucketName: !Ref EEGResultsBucket
        - CloudWatchLogsFullAccess
      LoggingConfig:
        LogFormat: JSON
        LogGroup: !Ref ResultsMetadataLogGroup

  ProcessingNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EEGProcessingNotifications
      DisplayName: EEG Processing Notifications
      Subscription:
        - Protocol: email
          Endpoint: "hss70@bath.ac.uk"

  StatusQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EEG-Status-Queue

  # --- CloudWatch Alarms ---
  StepFunctionFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-StepFunction-Failures
      AlarmDescription: Alert when Step Function executions fail
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref ProcessingStateMachine
      AlarmActions:
        - !Ref ProcessingNotificationTopic

  ECSTaskFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-ECS-Task-Failures
      AlarmDescription: Alert when ECS tasks fail
      MetricName: TasksStoppedReason
      Namespace: AWS/ECS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref EEGFargateCluster
      AlarmActions:
        - !Ref ProcessingNotificationTopic

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-Lambda-Errors
      AlarmDescription: Alert when Lambda functions error
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ProcessingNotificationTopic

  # --- CloudWatch Dashboard ---
  EEGProcessingDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-EEG-Processing-Pipeline
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/States", "ExecutionsStarted", "StateMachineArn", "${ProcessingStateMachine}" ],
                  [ ".", "ExecutionsSucceeded", ".", "." ],
                  [ ".", "ExecutionsFailed", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Step Function Executions",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ECS", "CPUUtilization", "ClusterName", "${EEGFargateCluster}" ],
                  [ ".", "MemoryUtilization", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ECS Resource Utilization",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${S3EventProcessorLambda}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Performance",
                "period": 300
              }
            }
          ]
        }

  # --- IAM Roles ---
  EEGTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${EEGUploadBucketName}"
                  - !Sub "arn:aws:s3:::${EEGUploadBucketName}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !GetAtt EEGResultsBucket.Arn
                  - !Sub "${EEGResultsBucket.Arn}/*"
        - PolicyName: DynamoDBStatusUpdate
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ProcessingStatusTable.Arn
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  # --- Step Function Execution Role ---
  EEGStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt ClassifierProcessorLambda.Arn
                  - !GetAtt ResultsMetadataLambda.Arn
                  - !GetAtt ManifestProcessorLambda.Arn
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource: "*"
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt EEGTaskExecutionRole.Arn
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctions*
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${EEGUploadBucketName}/*"
              - Effect: Allow
                Action: s3:HeadObject
                Resource: !Sub "${EEGResultsBucket.Arn}/*"
              - Effect: Allow
                Action: dynamodb:UpdateItem
                Resource: !GetAtt ProcessingStatusTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"

  # --- ECS Resources ---
  EEGFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: EEG-Classifier-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

  ClassifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/eeg-classifier
      RetentionInDays: 30

  ClassifierECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: eeg-classifier
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["v"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": { "type": "expire" }
              }
            ]
          }

  EEGFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: EEGClassifierTask
      Cpu: "1024"
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EEGTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: eeg-classifier
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ClassifierECR}:latest
          Essential: true
          Environment:
            - Name: UPLOAD_BUCKET
              Value: !Ref EEGUploadBucketName
            - Name: RESULTS_BUCKET
              Value: !Ref EEGResultsBucket
            - Name: STATUS_TABLE
              Value: !Ref ProcessingStatusTable
            - Name: CLASSIFIER_TABLE
              Value: !Ref EEGClassifierTable
            - Name: PRIVATE_SG
              Value: !Ref PrivateSG
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClassifierLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: eeg-classifier

  # --- CloudWatch Log Groups for Step Functions ---
  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/stepfunctions/${AWS::StackName}-ProcessingStateMachine
      RetentionInDays: 30

  # --- Step Functions ---
  ProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: EEGProcessingStateMachine.asl.json
      DefinitionSubstitutions:
        ProcessingStatusTable: !Ref ProcessingStatusTable
        EEGFargateCluster: !GetAtt EEGFargateCluster.Arn
        EEGFargateTaskDefinition: !Ref EEGFargateTaskDefinition
        PrivateSG: !Ref PrivateSG
        PrivateSubnetId1: !Ref PrivateSubnetId1
        PrivateSubnetId2: !Ref PrivateSubnetId2
        ManifestProcessorLambdaArn: !GetAtt ManifestProcessorLambda.Arn
        ClassifierProcessorLambdaArn: !GetAtt ClassifierProcessorLambda.Arn
        ResultsMetadataLambdaArn: !GetAtt ResultsMetadataLambda.Arn
        ResultsBucket: !Ref EEGResultsBucket
      Role: !GetAtt EEGStepFunctionRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionLogGroup.Arn
      Tracing:
        Enabled: true
      Tags:
        AI4NG: "true"
        TrainingPipeline: "true"

Outputs:
  StatusApiUrl:
    Value: !Sub https://${SharedApiId}.execute-api.${AWS::Region}.amazonaws.com/dev/api/status/
    Description: URL for status checking API
    Export:
      Name: EEGStatusApiUrl
  ResultsBucketName:
    Value: !Ref EEGResultsBucket
    Export:
      Name: EEGResultsBucketName
  ECRRepositoryUri:
    Value: !GetAtt ClassifierECR.RepositoryUri
    Description: URI for the ECR repository containing the classifier image
    Export:
      Name: EEGClassifierECRUri
  ProcessingStateMachineArn:
    Value: !Ref ProcessingStateMachine
    Description: ARN of the EEG processing state machine
    Export:
      Name: EEGProcessingStateMachineArn
  DashboardUrl:
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-EEG-Processing-Pipeline
    Description: URL to the CloudWatch Dashboard
    Export:
      Name: EEGProcessingDashboardUrl
  S3EventProcessorLambdaName:
    Value: !Ref S3EventProcessorLambda
    Description: Name of S3 event processor Lambda
    Export:
      Name: S3EventProcessorLambdaName
