AWSTemplateFormatVersion: '2010-09-09'
Description: EEG Processing Pipeline with Mobile Status Tracking
Transform: AWS::Serverless-2016-10-31

Parameters:
  EEGUploadBucketName:
    Type: String
    Description: Name of the existing EEG upload bucket
  PrivateSG:
    Type: String
    Description: Security group ID for private resources
  PrivateSubnetId1:
    Type: String
    Description: First private subnet ID
  PrivateSubnetId2:
    Type: String
    Description: Second private subnet ID

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - PrivateSG
          - PrivateSubnetId1
          - PrivateSubnetId2
      - Label:
          default: "S3 Configuration"
        Parameters:
          - EEGUploadBucketName

Resources:
  # --- S3 Buckets ---
  EEGResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ai4ng-eeg-results-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
            Function: !GetAtt ClassifierProcessorLambda.Arn
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ResultsMetadataLambda.Arn
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: 'manifest.json'
            Function: !GetAtt ManifestProcessorLambda.Arn

  # --- DynamoDB Tables ---
  ProcessingStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: EEGProcessingStatus
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: expiry
        Enabled: true

  EEGClassifierTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FBCSPClassifierParameters
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # --- API Gateway ---
  StatusApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: EEGProcessingStatusAPI
          version: "1.0"
        paths:
          /status/{sessionId}:
            get:
              summary: Get processing status
              parameters:
                - name: sessionId
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Status information
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/StatusResponse"
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStatusLambda.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            StatusResponse:
              type: object
              properties:
                sessionId:
                  type: string
                status:
                  type: string
                  enum: [PENDING, PROCESSING, COMPLETED, FAILED]
                userId:
                  type: string
                startTime:
                  type: number
                processingDuration:
                  type: number
                resultsPath:
                  type: string

  # --- Lambda Functions ---
  GetStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/status_check/
      Handler: app.handler
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ProcessingStatusTable

  ManifestProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/manifest_processor/
      Handler: app.handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
          SNS_TOPIC_ARN: !Ref ProcessingNotificationTopic
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ProcessingStatusTable
        - S3ReadPolicy:
            BucketName: !Ref EEGResultsBucket
        - SNSPublishPolicy:
            TopicName: !Ref ProcessingNotificationTopic

  ClassifierProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/classifier_processor/
      Handler: app.handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          CLASSIFIER_TABLE: !Ref EEGClassifierTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref EEGClassifierTable
        - S3ReadPolicy:
            BucketName: !Ref EEGResultsBucket

  ResultsMetadataLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/results_metadata/
      Handler: app.handler
      Runtime: python3.9
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STATUS_TABLE: !Ref ProcessingStatusTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ProcessingStatusTable
        - S3ReadPolicy:
            BucketName: !Ref EEGResultsBucket

  # --- IAM Roles ---
  EEGTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${EEGUploadBucketName}/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub ${EEGResultsBucket.Arn}/*
        - PolicyName: DynamoDBStatusUpdate
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:UpdateItem
                Resource: !GetAtt ProcessingStatusTable.Arn

  # --- ECS Task Role (for application container) ---
  EEGTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EEGTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DataAccessPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # S3 access for input/output data
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${EEGUploadBucketName}
                  - !Sub arn:aws:s3:::${EEGUploadBucketName}/*
                  
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::${EEGResultsBucket}
                  - !Sub arn:aws:s3:::${EEGResultsBucket}/*
                  
              # DynamoDB access for status updates
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt ProcessingStatusTable.Arn
  EEGTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EEGTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  # --- Step Function Execution Role ---
  EEGStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permissions for Lambda invocation
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: 
                  - !Ref ClassifierProcessorLambda
                  - !Ref ResultsMetadataLambda
                  - !Ref ManifestProcessorLambda
                  
              # Permissions for ECS task management
              - Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:DescribeTasks
                Resource: "*"
                
              # Permission to pass roles to ECS
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt EEGTaskExecutionRole.Arn
                  
              # CloudWatch Events permissions
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctions*

  # --- ECS Resources ---
  EEGFargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: EEG-Classifier-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ClassifierLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/eeg-classifier
      RetentionInDays: 30

  ClassifierECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: eeg-classifier
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["v"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": { "type": "expire" }
              }
            ]
          }

  EEGFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: EEGClassifierTask
      Cpu: '1024'
      Memory: '4096'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EEGTaskExecutionRole.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref PrivateSG
          Subnets:
            - !Ref PrivateSubnetId1
            - !Ref PrivateSubnetId2
      ContainerDefinitions:
        - Name: eeg-classifier
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ClassifierECR}:latest
          Essential: true
          Environment:
            - Name: UPLOAD_BUCKET
              Value: !Ref EEGUploadBucketName
            - Name: RESULTS_BUCKET
              Value: !Ref EEGResultsBucket
            - Name: STATUS_TABLE
              Value: !Ref ProcessingStatusTable
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ClassifierLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: eeg-classifier

  # --- Step Functions ---
  ProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: infra/state-machine.asl.json
      Role: !GetAtt EEGStepFunctionRole.Arn
      Events:
        S3UploadTrigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source: ["aws.s3"]
              detail-type: ["Object Created"]
              detail:
                bucket:
                  name: [!Ref EEGUploadBucketName]
                object:
                  key:
                    prefix: "uploads/"
                    suffix: ".zip"

  # --- Lambda Permissions ---
  ClassifierProcessorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ClassifierProcessorLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt EEGResultsBucket.Arn

  ResultsMetadataLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResultsMetadataLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt EEGResultsBucket.Arn

  ManifestProcessorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ManifestProcessorLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt EEGResultsBucket.Arn

Outputs:
  StatusApiUrl:
    Value: !Sub https://${StatusApi}.execute-api.${AWS::Region}.amazonaws.com/prod/status/
    Description: URL for status checking API
    Export:
      Name: EEGStatusApiUrl
  ResultsBucketName:
    Value: !Ref EEGResultsBucket
    Export:
      Name: EEGResultsBucketName
  ECRRepositoryUri:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ClassifierECR}
    Description: URI for the ECR repository containing the classifier image
    Export:
      Name: EEGClassifierECRUri
  ProcessingStateMachineArn:
    Value: !Ref ProcessingStateMachine
    Description: ARN of the EEG processing state machine
    Export:
      Name: EEGProcessingStateMachineArn