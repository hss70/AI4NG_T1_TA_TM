{
    "Comment": "Manifest-Driven EEG Processing Pipeline",
    "StartAt": "ExtractSessionInfo",
    "States": {
        "ExtractSessionInfo": {
            "Type": "Pass",
            "Parameters": {
                "pathParts.$": "States.StringSplit($.detail.object.key, '/')",
                "userId.$": "States.ArrayGetItem(States.StringSplit($.detail.object.key, '/'), 0)",
                "sessionId.$": "States.ArrayGetItem(States.StringSplit($.detail.object.key, '/'), 1)",
                "inputFile.$": "$.detail.object.key"
            },
            "ResultPath": "$.sessionInfo",
            "Next": "RecordProcessingStart"
        },
        "RecordProcessingStart": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
                "TableName": "${ProcessingStatusTable}",
                "Key": {
                    "sessionId": {
                        "S.$": "$.sessionInfo.sessionId"
                    }
                },
                "UpdateExpression": "SET #s = :status, #u = :user, #t = :time",
                "ExpressionAttributeNames": {
                    "#s": "status",
                    "#u": "userId",
                    "#t": "startTime"
                },
                "ExpressionAttributeValues": {
                    ":status": {
                        "S": "PROCESSING"
                    },
                    ":user": {
                        "S.$": "$.sessionInfo.userId"
                    },
                    ":time": {
                        "S.$": "$$.Execution.StartTime"
                    }
                }
            },
            "ResultPath": "$.dynamoResult",
            "Next": "LaunchECSTask"
        },
        "LaunchECSTask": {
            "Type": "Task",
            "Resource": "arn:aws:states:::ecs:runTask.sync",
            "Parameters": {
                "LaunchType": "FARGATE",
                "Cluster": "${EEGFargateCluster}",
                "TaskDefinition": "${EEGFargateTaskDefinition}",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "Subnets": [
                            "${PrivateSubnetId1}",
                            "${PrivateSubnetId2}"
                        ],
                        "SecurityGroups": [
                            "${PrivateSG}"
                        ],
                        "AssignPublicIp": "DISABLED"
                    }
                },
                "Overrides": {
                    "ContainerOverrides": [
                        {
                            "Name": "eeg-classifier",
                            "Environment": [
                                {
                                    "Name": "INPUT_FILE",
                                    "Value.$": "$.sessionInfo.inputFile"
                                },
                                {
                                    "Name": "USER_ID",
                                    "Value.$": "$.sessionInfo.userId"
                                },
                                {
                                    "Name": "SESSION_ID",
                                    "Value.$": "$.sessionInfo.sessionId"
                                }
                            ]
                        }
                    ]
                }
            },
            "ResultPath": "$.ecsResult",
            "Next": "WaitForManifest",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 30,
                    "MaxAttempts": 1,
                    "BackoffRate": 2
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "RecordFailure"
                }
            ]
        },
        "WaitForManifest": {
            "Type": "Wait",
            "Seconds": 30,
            "Next": "CheckManifestExists"
        },
        "CheckManifestExists": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:s3:headObject",
            "Parameters": {
                "Bucket": "${ResultsBucket}",
                "Key.$": "States.Format('{}/{}/manifest.json', $.sessionInfo.userId, $.sessionInfo.sessionId)"
            },
            "Next": "ProcessManifest",
            "Retry": [
                {
                    "ErrorEquals": [
                        "S3.NotFound"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 20,
                    "BackoffRate": 1
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "S3.NotFound"
                    ],
                    "Next": "WaitForManifest"
                },
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "RecordFailure"
                }
            ]
        },
        "ProcessManifest": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ManifestProcessorLambdaArn}",
                "Payload": {
                    "s3Bucket": "${ResultsBucket}",
                    "s3Key.$": "States.Format('{}/{}/manifest.json', $.sessionInfo.userId, $.sessionInfo.sessionId)"
                }
            },
            "ResultSelector": {
                "manifest.$": "$.Payload"
            },
            "ResultPath": "$.manifestOutput",
            "Next": "CheckClassifierExists",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 3,
                    "BackoffRate": 1.5
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "RecordFailure"
                }
            ]
        },
        "CheckClassifierExists": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:s3:headObject",
            "Parameters": {
                "Bucket": "${ResultsBucket}",
                "Key.$": "States.Format('{}/{}/FBCSP_online_setup_prep_01 [online].json', $.sessionInfo.userId, $.sessionInfo.sessionId)"
            },
            "Next": "ProcessClassifier",
            "Catch": [
                {
                    "ErrorEquals": [
                        "S3.NotFound"
                    ],
                    "Next": "RecordFailure"
                },
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "RecordFailure"
                }
            ]
        },
        "ProcessClassifier": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ClassifierProcessorLambdaArn}",
                "Payload": {
                    "s3Bucket": "${ResultsBucket}",
                    "s3Key.$": "States.Format('{}/{}/FBCSP_online_setup_prep_01 [online].json', $.sessionInfo.userId, $.sessionInfo.sessionId)"
                }
            },
            "ResultPath": "$.classifierResult",
            "Next": "CheckForMetadata",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 3,
                    "BackoffRate": 1.5
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "RecordFailure"
                }
            ]
        },
        "CheckForMetadata": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.manifestOutput.manifest.hasMetadata",
                    "BooleanEquals": true,
                    "Next": "ProcessMetadata"
                }
            ],
            "Default": "RecordSuccess"
        },
        "ProcessMetadata": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${ResultsMetadataLambdaArn}",
                "Payload": {
                    "s3Bucket": "${ResultsBucket}",
                    "s3Key.$": "States.Format('{}/{}/{}', $.sessionInfo.userId, $.sessionInfo.sessionId, $.manifestOutput.manifest.metadataFile)"
                }
            },
            "ResultPath": "$.metadataResult",
            "Next": "RecordSuccess",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 3,
                    "BackoffRate": 1.5
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "RecordFailure"
                }
            ]
        },
        "RecordSuccess": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
                "TableName": "${ProcessingStatusTable}",
                "Key": {
                    "sessionId": {
                        "S.$": "$.sessionInfo.sessionId"
                    }
                },
                "UpdateExpression": "SET #s = :status, #e = :endTime",
                "ExpressionAttributeNames": {
                    "#s": "status",
                    "#e": "endTime"
                },
                "ExpressionAttributeValues": {
                    ":status": {
                        "S": "SUCCESS"
                    },
                    ":endTime": {
                        "S.$": "$$.State.EnteredTime"
                    }
                }
            },
            "End": true
        },
        "RecordFailure": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
                "TableName": "${ProcessingStatusTable}",
                "Key": {
                    "sessionId": {
                        "S.$": "$.sessionInfo.sessionId"
                    }
                },
                "UpdateExpression": "SET #s = :status, #e = :error, #t = :time",
                "ExpressionAttributeNames": {
                    "#s": "status",
                    "#e": "error",
                    "#t": "endTime"
                },
                "ExpressionAttributeValues": {
                    ":status": {
                        "S": "FAILED"
                    },
                    ":error": {
                        "S.$": "States.JsonToString($.error)"
                    },
                    ":time": {
                        "S.$": "$$.State.EnteredTime"
                    }
                }
            },
            "End": true
        }
    }
}