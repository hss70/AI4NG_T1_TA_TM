name: Deploy Infrastructure
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    paths:
      - 'infra/**'
      - '!infra/EEGProcessingStateMachine.asl.json'
      - '!**/*.md'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-2
      STACK_NAME: EEG-Training-Pipeline

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Get all required exported values
      - name: Get CloudFormation exports
        id: get_exports
        run: |
          echo "Fetching CloudFormation exports..."
          # Get upload bucket
          BUCKET_NAME=$(aws cloudformation list-exports \
            --query "Exports[?Name=='EEGUploadBucketName'].Value" \
            --output text)
          
          # Get security group
          SG_ID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='NetworkStack-PrivateSG'].Value" \
            --output text)
          
          # Get subnet IDs from comma-separated value
          SUBNETS_STRING=$(aws cloudformation list-exports \
            --query "Exports[?Name=='NetworkStack-PrivateSubnetIds'].Value" \
            --output text)
          
          # Split into individual subnets
          SUBNET1=$(echo "$SUBNETS_STRING" | cut -d',' -f1)
          SUBNET2=$(echo "$SUBNETS_STRING" | cut -d',' -f2)
          
          # Get API ID (if needed elsewhere)
          API_ID=$(aws cloudformation list-exports \
            --query "Exports[?Name=='SharedApiId'].Value" \
            --output text)
          
          # Verify values exist
          if [ -z "$BUCKET_NAME" ]; then
            echo "::error::EEGUploadBucketName export not found"
            exit 1
          fi
          if [ -z "$SG_ID" ]; then
            echo "::error::NetworkStack-PrivateSG export not found"
            exit 1
          fi
          if [ -z "$SUBNETS_STRING" ]; then
            echo "::error::NetworkStack-PrivateSubnetIds export not found"
            exit 1
          fi
          if [ -z "$SUBNET1" ] || [ -z "$SUBNET2" ]; then
            echo "::error::Could not parse subnets from: $SUBNETS_STRING"
            exit 1
          fi
          
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "sg_id=$SG_ID" >> $GITHUB_OUTPUT
          echo "subnet1_id=$SUBNET1" >> $GITHUB_OUTPUT
          echo "subnet2_id=$SUBNET2" >> $GITHUB_OUTPUT
          echo "api_id=$API_ID" >> $GITHUB_OUTPUT  # Keep if needed elsewhere

      - name: Validate CloudFormation templates
        run: |
          aws cloudformation validate-template --template-body file://infra/IAM.yaml
          aws cloudformation validate-template --template-body file://infra/trainingPipelineTemplate.yaml

      - name: Deploy IAM Stack
        run: |
          aws cloudformation deploy \
            --template-file infra/IAM.yaml \
            --stack-name ${STACK_NAME}-IAM \
            --capabilities CAPABILITY_IAM

      - name: Deploy Main Pipeline Stack
        run: |
          aws cloudformation deploy \
            --template-file infra/trainingPipelineTemplate.yaml \
            --stack-name ${STACK_NAME}-Main \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              EEGUploadBucketName=${{ steps.get_exports.outputs.bucket_name }} \
              PrivateSG=${{ steps.get_exports.outputs.sg_id }} \
              PrivateSubnetId1=${{ steps.get_exports.outputs.subnet1_id }} \
              PrivateSubnetId2=${{ steps.get_exports.outputs.subnet2_id }}